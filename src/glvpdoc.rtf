{\rtf1\ansi \deff0\deflang1024

{\fonttbl
{\f0\froman Times New Roman;}
{\f1\froman Symbol;}
{\f2\fswiss Arial;}
{\f3\froman Times Roman;}
{\f4\fnil Univers;}
{\f5\fnil Univers Medium Condensed;}
{\f6\fnil Univers Condensed;}
{\f7\fswiss LetterGothic;}
{\f8\fdecor ZapfDingbats;}
{\f9\fnil Lucida Stars;}
{\f10\fswiss Helvetica-Narrow;}
{\f11\fswiss CB Univers 67 CondensedBold;}
{\f12\froman Times;}
{\f13\fmodern Letter Gothic MS;}
{\f14\fswiss C Univers 57 Condensed;}
{\f15\fnil MSIcons;}
{\f16\fswiss Arial Narrow;}
{\f17\fmodern Courier;}
{\f18\fnil Wingdings;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}

{\stylesheet
{\s243\li-1800\sl210\tqr\tx6960 \b\f2\fs19\lang1033 header;}
{\s251\sb60\sa40\sl280 \b\f2\lang1033 heading 4;}
{\s252\li240\sb80\sa40\sl340 \b\f2\lang1033 heading 3;}
{\s253\li240\sb140\sa60\sl380 \b\f0\fs28\lang1033 heading 2;}
{\s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 heading 1;}
{\li240\sa160\sl240 \f2\fs20\lang1033 Normal;}
{\s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\li240\sl440\keep\keepn \b\f2\fs34\lang1033 Rh1;}
{\s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Rmh;}
{\s50\li240\sl240 \f2\fs20\lang1033 Term1;}
{\s53\li480\sl240 \f2\fs20\lang1033 Term2;}
{\s54\li480\sa80\sl240 \f2\fs20\lang1033 Def1;}
{\s55\li720\sa80\sl240 \f2\fs20\lang1033 Def2;}
{\s57\li-1770\ri30\sb280\sa160\sl120\brdrb\brdrs\brdrw15 \fs8\cf8\lang1033 Rule;}
{\s93\li240\sl240 \f2\fs20\lang1033 Index Link;}
{\f2\fs20\lang1033 Table Text;}
}

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
${\footnote $ Contents}
+{\footnote + contents:0000} 
GLView Programmers Help Contents\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 To display a list of topics by category, click any 
of the contents entries below. To display an alphabetical list of 
topics, choose the Index button.\par 

\pard\plain \s252\li240\sb80\sa40\sl340 \b\f2\lang1033 COM Elements\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Objects and Interfaces}{\v ctx_comobj}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Object Methods}{\v ctx_commeth}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Object Properties}{\v ctx_comprop}\par 
\pard\plain \sl-240 \fs21\lang1033 \par 

\pard\plain \s252\li240\sb80\sa40\sl340 \b\f2\lang1033 C/C++ Elements\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Classes and Class Members}{\v ctx_classes}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Functions}{\v ctx_functions}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Messages}{\v ctx_messages}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Structures and Enums}{\v ctx_types}\par 
\pard\plain \sl-240 \fs21\lang1033 \par 

\pard\plain \s252\li240\sb80\sa40\sl340 \b\f2\lang1033 Other\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Overviews}{\v ctx_overviews}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Modules}{\v ctx_modules}\par 
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Constants}{\v ctx_constants}\par 
\pard\plain \sl-240 \fs21\lang1033 \par 
\pard\plain \sl-240 \fs21\lang1033 \par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Help file built: 10/25/96\par
\pard\plain \sl-240 \fs21\lang1033 \par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 \fs16{\ul About Autoduck}{\v aboutautoduck}\par 
\par 

\page 

\pard\plain \s252\li240\sb80\sa40\sl340 \b\f2\lang1033 
#{\footnote \pard\plain \f2\fs20 # aboutautoduck}
${\footnote \pard\plain \f2\fs20 $ About Autoduck} About Autoduck
\par \trowd \trgaph108\trleft-108 
\cellx5580 \pard\plain \li144\ri144\sa160\sl240\slmult0\intbl \f2\fs20 
The sources for this Help file were generated by Autoduck, the source 
code documentation tool that generates Print or Help files from tagged 
comments in C, C++, Assembly, and Basic source files.\par 

For more information, contact Eric Artzt (erica@microsoft.com).\cell \row 

\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_comobj}
${\footnote $ Contents: Objects and Interfaces}
+{\footnote + contents:0000} 
Objects and Interfaces\par 



\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_commeth}
${\footnote $ Contents: Object Methods}
+{\footnote + contents:0000} 
Object Methods\par 



\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_comprop}
${\footnote $ Contents: Object Properties}
+{\footnote + contents:0000} 
Object Properties\par 



\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_comevent}
${\footnote $ Contents: Object Events}
+{\footnote + contents:0000} 
Object Events\par 


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_Classes}
${\footnote $ Contents: Classes and Class Members}
+{\footnote + contents:0000} 
Classes and Class Members\par 

\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb AStream}{\v AStream}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb BBox}{\v BBox}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::CDIB}{\v CDIB__CDIB}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::CopyBits}{\v CDIB__CopyBits}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::Create}{\v CDIB__Create}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::DoubleBits}{\v CDIB__DoubleBits}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::Draw}{\v CDIB__Draw}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::GetNumClrEntries}{\v CDIB__GetNumClrEntries}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::GetPixelAddress}{\v CDIB__GetPixelAddress}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::GetRect}{\v CDIB__GetRect}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::Load}{\v CDIB__Load}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::MapColorsToPalette}{\v CDIB__MapColorsToPalette}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::Save}{\v CDIB__Save}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::SetColorTable}{\v CDIB__SetColorTable}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::StretchBits}{\v CDIB__StretchBits}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIB::~CDIB}{\v CDIB__.7eCDIB}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::Create}{\v CDIBPal__Create}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::CreateSystemColorPalette}{\v CDIBPal__CreateSystemColorPalette}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::CreateWash}{\v CDIBPal__CreateWash}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::Draw}{\v CDIBPal__Draw}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::GetNumColors}{\v CDIBPal__GetNumColors}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::Load}{\v CDIBPal__Load}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::Save}{\v CDIBPal__Save}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBPal::SetSysPalColors}{\v CDIBPal__SetSysPalColors}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::BitBlt}{\v CDIBSurface__BitBlt}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::Create}{\v CDIBSurface__Create}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::Draw}{\v CDIBSurface__Draw}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::Load}{\v CDIBSurface__Load}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::SetPalette}{\v CDIBSurface__SetPalette}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CDIBSurface::StretchBlt}{\v CDIBSurface__StretchBlt}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb CMyglView}{\v CMyglView}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb DecomposedMatrix}{\v DecomposedMatrix}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb DNewFontLogo}{\v DNewFontLogo}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb DObjNew}{\v DObjNew}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GEdgeList}{\v GEdgeList}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GFaceGroup}{\v GFaceGroup}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GFaceList}{\v GFaceList}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GMesh}{\v GMesh}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GModel}{\v GModel}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GPolygon}{\v GPolygon}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GPolyline}{\v GPolyline}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GRotSweep}{\v GRotSweep}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShell}{\v GShell}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellI}{\v GShellI}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GSphereSubdiv}{\v GSphereSubdiv}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GSweep}{\v GSweep}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GVertex}{\v GVertex}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GVertexI}{\v GVertexI}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GView}{\v GView}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Matrix}{\v Matrix}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb MatrixAndInverse}{\v MatrixAndInverse}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Plane}{\v Plane}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Ray}{\v Ray}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb RayRange}{\v RayRange}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb root object of graphical output objects}{\v root_object_of_graphical_output_objects}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Vector}{\v Vector}\par


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_Functions}
${\footnote $ Contents: Functions}
+{\footnote + contents:0000} 
Functions\par 

\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb ComputeExtrudedShell}{\v ComputeExtrudedShell}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb ComputeExtrudedShell}{\v ComputeExtrudedShell}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb ComputeGlyphOutline}{\v ComputeGlyphOutline}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb ComputeGlyphOutline}{\v ComputeGlyphOutline}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb ComputeGlyphOutline}{\v ComputeGlyphOutline}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb copylist}{\v copylist}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb InitImageTexture}{\v InitImageTexture}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb NewCircle}{\v NewCircle}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb NewCircle}{\v NewCircle}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb NewSphere}{\v NewSphere}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb NewSphere}{\v NewSphere}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellGeo}{\v WriteShellGeo}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellHmf}{\v WriteShellHmf}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellPov}{\v WriteShellPov}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellRaw}{\v WriteShellRaw}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellStl}{\v WriteShellStl}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WriteShellVrml}{\v WriteShellVrml}\par


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_Messages}
${\footnote $ Contents: Messages}
+{\footnote + contents:0000} 
Messages\par 



\par \page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_Types}
${\footnote $ Contents: Structures and Enums}
+{\footnote + contents:0000} 
Structures and Enums\par 

\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GFileFormats}{\v GFileFormats}\par


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_overviews}
${\footnote $ Contents: Overviews}
+{\footnote + contents:0000} 
Overviews\par 

\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView GClass structure}{\v GLView_GClass_structure}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView GLRenderState class}{\v GLView_GLRenderState_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView graphical objects}{\v GLView_graphical_objects}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView graphical objects input/output}{\v GLView_graphical_objects_input.2foutput}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb MFC core modules}{\v MFC_core_modules}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb MFC dialog modules}{\v MFC_dialog_modules}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Runtime information class}{\v Runtime_information_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Utility functions + classes}{\v Utility_functions_.2b_classes}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Utility template functions}{\v Utility_template_functions}\par


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_modules}
${\footnote $ Contents: Modules}
+{\footnote + contents:0000} 
Modules\par 

\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Array.h - Template based Array class}{\v Array.h_.2d_Template_based_Array_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb AStream.h - ascii input/output stream with some parsing support}{\v AStream.h_.2d_ascii_input.2foutput_stream_with_some_parsing_support}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb DObjNew.cpp - object creation dialogs}{\v DObjNew.cpp_.2d_object_creation_dialogs}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GClass.cpp - GLView graphical object classes implementation}{\v GClass.cpp_.2d_GLView_graphical_object_classes_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GDisplayTree.cpp - GLView tree display traversal routines}{\v GDisplayTree.cpp_.2d_GLView_tree_display_traversal_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GFont.cpp - GLView TrueType font support}{\v GFont.cpp_.2d_GLView_TrueType_font_support}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GFont.h - GLView TrueType font support}{\v GFont.h_.2d_GLView_TrueType_font_support}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GGeom.cpp - GLView geometry creation routines}{\v GGeom.cpp_.2d_GLView_geometry_creation_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GGeom.cpp - GLView geometry creation routines}{\v GGeom.cpp_.2d_GLView_geometry_creation_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GioTraversal.cpp - GLView ouput traversal routines}{\v GioTraversal.cpp_.2d_GLView_ouput_traversal_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLUtils.cpp - GLView utility routines for images & textures}{\v GLUtils.cpp_.2d_GLView_utility_routines_for_images_.26_textures}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLUtils.h - GL utility routines}{\v GLUtils.h_.2d_GL_utility_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLVDoc.cpp - GLView MFC document class}{\v GLVDoc.cpp_.2d_GLView_MFC_document_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLVDoc.h - GLView MFC document class}{\v GLVDoc.h_.2d_GLView_MFC_document_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView.cpp - GLView MFC application class}{\v GLView.cpp_.2d_GLView_MFC_application_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLView.h - GLView MFC application}{\v GLView.h_.2d_GLView_MFC_application}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLViewh.h - GLView MFC View class}{\v GLViewh.h_.2d_GLView_MFC_View_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb glvpdoc.d - Overview of GLView classes}{\v glvpdoc.d_.2d_Overview_of_GLView_classes}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GLVView.cpp - GLView CMyglView MFC View Class implementation}{\v GLVView.cpp_.2d_GLView_CMyglView_MFC_View_Class_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GModel.cpp - GLView data model (document) class implementation}{\v GModel.cpp_.2d_GLView_data_model_.28document.29_class_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GModel.h - GLView data model (document) class}{\v GModel.h_.2d_GLView_data_model_.28document.29_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GMorph.cpp - GLView polyhedron vertex morphing}{\v GMorph.cpp_.2d_GLView_polyhedron_vertex_morphing}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GRaySelect.cpp - GLView picking traversal routines}{\v GRaySelect.cpp_.2d_GLView_picking_traversal_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShell.cpp - GLView core graphical primitves}{\v GShell.cpp_.2d_GLView_core_graphical_primitves}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShell.h - GLView graphical objects}{\v GShell.h_.2d_GLView_graphical_objects}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellI.cpp - GLView GShellI graphical object}{\v GShellI.cpp_.2d_GLView_GShellI_graphical_object}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellI.h - GLView GShellI object}{\v GShellI.h_.2d_GLView_GShellI_object}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellIO.cpp - GLView additional GShell IO functions implementation}{\v GShellIO.cpp_.2d_GLView_additional_GShell_IO_functions_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellIO.h - GLView additional GShell IO functions}{\v GShellIO.h_.2d_GLView_additional_GShell_IO_functions}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellOP.cpp - GLView GShell input routines}{\v GShellOP.cpp_.2d_GLView_GShell_input_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GShellOP.h - GLView shell operations}{\v GShellOP.h_.2d_GLView_shell_operations}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GUtils.cpp - GLView utility routines implementation}{\v GUtils.cpp_.2d_GLView_utility_routines_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb GUtils.h - GLView utility routines}{\v GUtils.h_.2d_GLView_utility_routines}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb mainfrm.cpp - GLView MFC CMainFrame class}{\v mainfrm.cpp_.2d_GLView_MFC_CMainFrame_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb Matrix.h - 4*4 Matrix class}{\v Matrix.h_.2d_4.2a4_Matrix_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb point.h - Generic Point + Vector (= Normal) class}{\v point.h_.2d_Generic_Point_.2b_Vector_.28.3d_Normal.29_class}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb PointA.cpp - Pointarray classes implementation}{\v PointA.cpp_.2d_Pointarray_classes_implementation}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb QvEval.cpp - GLView qv node conversion}{\v QvEval.cpp_.2d_GLView_qv_node_conversion}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb tomesh.cpp - Convert independent triangles to large triangle meshes}{\v tomesh.cpp_.2d_Convert_independent_triangles_to_large_triangle_meshes}\par
\pard\plain \s93\li240\sl240 \f2\fs20\lang1033 {\uldb WWW.h - GLView WWW access + file/extension handling}{\v WWW.h_.2d_GLView_WWW_access_.2b_file.2fextension_handling}\par


\page 

\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ctx_constants}
${\footnote $ Contents: Constants}
+{\footnote + contents:0000} 
Constants\par 


\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView_GClass_structure}
${\footnote $ GLView GClass structure}
K{\footnote K GLView GClass structure}
+{\footnote + overviews:0000} 
GLView GClass structure\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GClass.h\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView_GLRenderState_class}
${\footnote $ GLView GLRenderState class}
K{\footnote K GLView GLRenderState class}
+{\footnote + overviews:0000} 
GLView GLRenderState class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 glrender.h: {\b RenderState} 
glutils.h 
tkdib.h 
tkrgb.h\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView_graphical_objects}
${\footnote $ GLView graphical objects}
K{\footnote K GLView graphical objects}
+{\footnote + overviews:0000} 
GLView graphical objects\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GShell.h: {\uldb GShell}{\v GShell} {\uldb GMesh}{\v GMesh} {\uldb GPolygon}{\v GPolygon} {\uldb GPolyline}{\v GPolyline} 
GShellI.h: {\b GshellI}\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView_graphical_objects_input.2foutput}
${\footnote $ GLView graphical objects input/output}
K{\footnote K GLView graphical objects input/output}
+{\footnote + overviews:0000} 
GLView graphical objects input/output\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GShellIO.h 
GShellOp.cpp\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # MFC_core_modules}
${\footnote $ MFC core modules}
K{\footnote K MFC core modules}
+{\footnote + overviews:0000} 
MFC core modules\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GLView.h 
GLVView.h: {\uldb CMyglView}{\v CMyglView} 
GLVDoc.h 
mainfrm.h\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # MFC_dialog_modules}
${\footnote $ MFC dialog modules}
K{\footnote K MFC dialog modules}
+{\footnote + overviews:0000} 
MFC dialog modules\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 d*.h, d*.cpp 
See section Dialogs in GLVIEW.MAK project\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Runtime_information_class}
${\footnote $ Runtime information class}
K{\footnote K Runtime information class}
+{\footnote + overviews:0000} 
Runtime information class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 RT.H\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Utility_functions_.2b_classes}
${\footnote $ Utility functions + classes}
K{\footnote K Utility functions + classes}
+{\footnote + overviews:0000} 
Utility functions + classes\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 AStream.h 
Point.h {\b Point} 
Matrix.h {\uldb Matrix}{\v Matrix} 
PointA.h 
GUtils.h\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Utility_template_functions}
${\footnote $ Utility template functions}
K{\footnote K Utility template functions}
+{\footnote + overviews:0000} 
Utility template functions\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Array.H 
Stack.h\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Array.h_.2d_Template_based_Array_class}
${\footnote $ Array.h - Template based Array class}
K{\footnote K modules; Array.h - Template based Array class}
+{\footnote + overviews:0000} 
Module Array.h - Template based Array class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/ARRAY.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1993 - 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Template based Array class 
Designed to easily interchange with C array notation 
and "by value" elements 
Derived class NumericArray supports common arithmetic operators
\par  
Classes: 
Array<T> 
NumericArray<T> 
IntArray 
FloatArray
\par  
Notes:
\par Changes: 
change ARRAY_EXPANSION 
if < limit, only double size
MALLOC, CALLOC, FREE debug routines


Todo :
Automatic Expansion + Expansion factor
Implementation change :
use malloc, realloc, free instead of new & delete ?\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b ~Array()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 destructor\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # AStream.h_.2d_ascii_input.2foutput_stream_with_some_parsing_support}
${\footnote $ AStream.h - ascii input/output stream with some parsing support}
K{\footnote K modules; AStream.h - ascii input/output stream with some parsing support}
+{\footnote + overviews:0000} 
Module AStream.h - ascii input/output stream with some parsing support\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/ASTREAM.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
ascii input/output stream with some parsing support
\par Classes: 
AStream\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # DObjNew.cpp_.2d_object_creation_dialogs}
${\footnote $ DObjNew.cpp - object creation dialogs}
K{\footnote K modules; DObjNew.cpp - object creation dialogs}
+{\footnote + overviews:0000} 
Module DObjNew.cpp - object creation dialogs\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/DOBJNEW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
{\uldb DObjNew}{\v DObjNew} 
{\uldb DNewFontLogo}{\v DNewFontLogo}
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GClass.cpp_.2d_GLView_graphical_object_classes_implementation}
${\footnote $ GClass.cpp - GLView graphical object classes implementation}
K{\footnote K modules; GClass.cpp - GLView graphical object classes implementation}
+{\footnote + overviews:0000} 
Module GClass.cpp - GLView graphical object classes implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GCLASS.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GDisplayTree.cpp_.2d_GLView_tree_display_traversal_routines}
${\footnote $ GDisplayTree.cpp - GLView tree display traversal routines}
K{\footnote K modules; GDisplayTree.cpp - GLView tree display traversal routines}
+{\footnote + overviews:0000} 
Module GDisplayTree.cpp - GLView tree display traversal routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GDISPLAYTREE.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
create a tree view display of the qv scene tree
\par Classes: 
GDisplayTreeTraversal
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GFont.cpp_.2d_GLView_TrueType_font_support}
${\footnote $ GFont.cpp - GLView TrueType font support}
K{\footnote K modules; GFont.cpp - GLView TrueType font support}
+{\footnote + overviews:0000} 
Module GFont.cpp - GLView TrueType font support\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GFONT.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GFont.h_.2d_GLView_TrueType_font_support}
${\footnote $ GFont.h - GLView TrueType font support}
K{\footnote K modules; GFont.h - GLView TrueType font support}
+{\footnote + overviews:0000} 
Module GFont.h - GLView TrueType font support\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GFONT.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GGeom.cpp_.2d_GLView_geometry_creation_routines}
${\footnote $ GGeom.cpp - GLView geometry creation routines}
K{\footnote K modules; GGeom.cpp - GLView geometry creation routines}
+{\footnote + overviews:0000} 
Module GGeom.cpp - GLView geometry creation routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Different routines for Extruding, Sweeping contours, 
Circle Routine ...
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GGeom.cpp_.2d_GLView_geometry_creation_routines}
${\footnote $ GGeom.cpp - GLView geometry creation routines}
K{\footnote K modules; GGeom.cpp - GLView geometry creation routines}
+{\footnote + overviews:0000} 
Module GGeom.cpp - GLView geometry creation routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GGEOM.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GioTraversal.cpp_.2d_GLView_ouput_traversal_routines}
${\footnote $ GioTraversal.cpp - GLView ouput traversal routines}
K{\footnote K modules; GioTraversal.cpp - GLView ouput traversal routines}
+{\footnote + overviews:0000} 
Module GioTraversal.cpp - GLView ouput traversal routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GIOTRAVERSAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995,1996\tab by Holger Grahn 
All rights reserved
\par Purpose: 
implementation of all 
int **NODE**::Do(GioTraversal &state) 
methods
\par Classes: 
GioTraversal 
GPovIoTraversal
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLUtils.cpp_.2d_GLView_utility_routines_for_images_.26_textures}
${\footnote $ GLUtils.cpp - GLView utility routines for images & textures}
K{\footnote K modules; GLUtils.cpp - GLView utility routines for images & textures}
+{\footnote + overviews:0000} 
Module GLUtils.cpp - GLView utility routines for images & textures\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GLUTILS.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes: 
20.09.96 HG D3D routines (avoid gl specific functions)
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLUtils.h_.2d_GL_utility_routines}
${\footnote $ GLUtils.h - GL utility routines}
K{\footnote K modules; GLUtils.h - GL utility routines}
+{\footnote + overviews:0000} 
Module GLUtils.h - GL utility routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GLUTILS.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995  by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes: 
extracted from TK routines
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLVDoc.cpp_.2d_GLView_MFC_document_class}
${\footnote $ GLVDoc.cpp - GLView MFC document class}
K{\footnote K modules; GLVDoc.cpp - GLView MFC document class}
+{\footnote + overviews:0000} 
Module GLVDoc.cpp - GLView MFC document class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVDOC.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLVDoc.h_.2d_GLView_MFC_document_class}
${\footnote $ GLVDoc.h - GLView MFC document class}
K{\footnote K modules; GLVDoc.h - GLView MFC document class}
+{\footnote + overviews:0000} 
Module GLVDoc.h - GLView MFC document class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVDOC.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView.cpp_.2d_GLView_MFC_application_class}
${\footnote $ GLView.cpp - GLView MFC application class}
K{\footnote K modules; GLView.cpp - GLView MFC application class}
+{\footnote + overviews:0000} 
Module GLView.cpp - GLView MFC application class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVIEW.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes: 
app.OnIdle message is passes to active view
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLView.h_.2d_GLView_MFC_application}
${\footnote $ GLView.h - GLView MFC application}
K{\footnote K modules; GLView.h - GLView MFC application}
+{\footnote + overviews:0000} 
Module GLView.h - GLView MFC application\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVIEW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLViewh.h_.2d_GLView_MFC_View_class}
${\footnote $ GLViewh.h - GLView MFC View class}
K{\footnote K modules; GLViewh.h - GLView MFC View class}
+{\footnote + overviews:0000} 
Module GLViewh.h - GLView MFC View class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVVIEW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Main class for all user interface interaction & drawing intialization ...
\par Classes: 
{\uldb CMyglView}{\v CMyglView}
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # glvpdoc.d_.2d_Overview_of_GLView_classes}
${\footnote $ glvpdoc.d - Overview of GLView classes}
K{\footnote K modules; glvpdoc.d - Overview of GLView classes}
+{\footnote + overviews:0000} 
Module glvpdoc.d - Overview of GLView classes\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVPDOC.D\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Textfile with AutoDoc overview topics\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GLVView.cpp_.2d_GLView_CMyglView_MFC_View_Class_implementation}
${\footnote $ GLVView.cpp - GLView CMyglView MFC View Class implementation}
K{\footnote K modules; GLVView.cpp - GLView CMyglView MFC View Class implementation}
+{\footnote + overviews:0000} 
Module GLVView.cpp - GLView CMyglView MFC View Class implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/GLVVIEW.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes: 
all menu and dialog popup functions are implemented here
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GModel.cpp_.2d_GLView_data_model_.28document.29_class_implementation}
${\footnote $ GModel.cpp - GLView data model (document) class implementation}
K{\footnote K modules; GModel.cpp - GLView data model (document) class implementation}
+{\footnote + overviews:0000} 
Module GModel.cpp - GLView data model (document) class implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GMODEL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int  GView:: SetCamera(const char *cameraName)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the camera to the Camera node\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GModel.h_.2d_GLView_data_model_.28document.29_class}
${\footnote $ GModel.h - GLView data model (document) class}
K{\footnote K modules; GModel.h - GLView data model (document) class}
+{\footnote + overviews:0000} 
Module GModel.h - GLView data model (document) class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GMODEL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
{\uldb GModel}{\v GModel} 
{\uldb GView}{\v GView}
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GMorph.cpp_.2d_GLView_polyhedron_vertex_morphing}
${\footnote $ GMorph.cpp - GLView polyhedron vertex morphing}
K{\footnote K modules; GMorph.cpp - GLView polyhedron vertex morphing}
+{\footnote + overviews:0000} 
Module GMorph.cpp - GLView polyhedron vertex morphing\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GMORPH.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1994,1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
GMorph
\par Notes: 
Melt effect based on Glenn M. Lewis, Dr. Dobbs'Journal, 07 1994 P.g 86
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GRaySelect.cpp_.2d_GLView_picking_traversal_routines}
${\footnote $ GRaySelect.cpp - GLView picking traversal routines}
K{\footnote K modules; GRaySelect.cpp - GLView picking traversal routines}
+{\footnote + overviews:0000} 
Module GRaySelect.cpp - GLView picking traversal routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GRAYSELECT.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
GRaySelectTraversal
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShell.cpp_.2d_GLView_core_graphical_primitves}
${\footnote $ GShell.cpp - GLView core graphical primitves}
K{\footnote K modules; GShell.cpp - GLView core graphical primitves}
+{\footnote + overviews:0000} 
Module GShell.cpp - GLView core graphical primitves\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Implementation of graphical primitives GShell, GMesh ...
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i tesselateFaceList}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 input facelist\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i v}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 corresponding vertices for indices in f\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i vmap}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 optional vertex map list\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i newf}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 output: triangulated facelist\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i new2old}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 optional mapping from new triangles to old face indices\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i theShell}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 optional shell to append vertices too\par 

\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShell.h_.2d_GLView_graphical_objects}
${\footnote $ GShell.h - GLView graphical objects}
K{\footnote K modules; GShell.h - GLView graphical objects}
+{\footnote + overviews:0000} 
Module GShell.h - GLView graphical objects\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GShell.h 
Copyright (c) 1993 - 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par GFaceList\tab \tab IntArray for storing face information
\par GEdgeList\tab \tab IntArray for storing edge
\par GVertex\tab \tab \tab structure storing complete vertex information 
GVertexI\tab \tab like GVertex, but information stored by index (ref. to table)
\par GObject\tab \tab \tab root for Graphical objects 
GShell\tab \tab polyhedral object 
GMesh\tab regular quad mesh 
GPolyggon
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellI.cpp_.2d_GLView_GShellI_graphical_object}
${\footnote $ GShellI.cpp - GLView GShellI graphical object}
K{\footnote K modules; GShellI.cpp - GLView GShellI graphical object}
+{\footnote + overviews:0000} 
Module GShellI.cpp - GLView GShellI graphical object\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLI.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellI.h_.2d_GLView_GShellI_object}
${\footnote $ GShellI.h - GLView GShellI object}
K{\footnote K modules; GShellI.h - GLView GShellI object}
+{\footnote + overviews:0000} 
Module GShellI.h - GLView GShellI object\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLI.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
{\uldb GFaceGroup}{\v GFaceGroup} 
{\uldb GShellI}{\v GShellI} 
Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellIO.cpp_.2d_GLView_additional_GShell_IO_functions_implementation}
${\footnote $ GShellIO.cpp - GLView additional GShell IO functions implementation}
K{\footnote K modules; GShellIO.cpp - GLView additional GShell IO functions implementation}
+{\footnote + overviews:0000} 
Module GShellIO.cpp - GLView additional GShell IO functions implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLIO.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Additional member functions for GShell GMesh (GShell.cpp) are 
implemented here, but defined in GShell.h. 
GShell 
// additional io routines implemented in GShellIO.CPP 
#ifdef _HMF 
// write shell to AStream in HMF format 
virtual int WriteHmf(AStream &a); 
#endif
\par // write to GEO polygon format (optional with normals) 
int WriteGeo(AStream &a,int outputNormals=0);
\par // write to STL triangle format 
int WriteStl(AStream &a)
\par // write to POV Ray-tracer format 
virtual int WritePov(AStream &a);
\par // write to RAW triangle format 
virtual int WriteRaw(AStream &a); 
#ifdef _VRML 
// write to AStream in VRML format 
virtual int WriteVrml(AStream &a); 
#endif
\par GMesh 
// additional io routines implemented in GShellIO.CPP 
#ifdef _HMF 
// write mesh to AStream in HMF format 
int WriteHmf(AStream &a); 
#endif 
#ifdef _VRML 
// write to AStream in VRML format 
virtual int WriteVrml(AStream &a); 
#endif
\par GShellI
\par #ifdef _VRML 
// write to AStream in VRML format 
virtual int WriteVrml(AStream &a); 
#endif
\par 
\par  
Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellIO.h_.2d_GLView_additional_GShell_IO_functions}
${\footnote $ GShellIO.h - GLView additional GShell IO functions}
K{\footnote K modules; GShellIO.h - GLView additional GShell IO functions}
+{\footnote + overviews:0000} 
Module GShellIO.h - GLView additional GShell IO functions\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellOP.cpp_.2d_GLView_GShell_input_routines}
${\footnote $ GShellOP.cpp - GLView GShell input routines}
K{\footnote K modules; GShellOP.cpp - GLView GShell input routines}
+{\footnote + overviews:0000} 
Module GShellOP.cpp - GLView GShell input routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLOP.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellOP.h_.2d_GLView_shell_operations}
${\footnote $ GShellOP.h - GLView shell operations}
K{\footnote K modules; GShellOP.h - GLView shell operations}
+{\footnote + overviews:0000} 
Module GShellOP.h - GLView shell operations\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GSHELLOP.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Implements HMF / 3DV / RAW formats 
Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GUtils.cpp_.2d_GLView_utility_routines_implementation}
${\footnote $ GUtils.cpp - GLView utility routines implementation}
K{\footnote K modules; GUtils.cpp - GLView utility routines implementation}
+{\footnote + overviews:0000} 
Module GUtils.cpp - GLView utility routines implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GUTILS.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GUtils.h_.2d_GLView_utility_routines}
${\footnote $ GUtils.h - GLView utility routines}
K{\footnote K modules; GUtils.h - GLView utility routines}
+{\footnote + overviews:0000} 
Module GUtils.h - GLView utility routines\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/GUTILS.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Template functions for min swap 
PI ... 
DEG2RAD
\par Classes:
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # mainfrm.cpp_.2d_GLView_MFC_CMainFrame_class}
${\footnote $ mainfrm.cpp - GLView MFC CMainFrame class}
K{\footnote K modules; mainfrm.cpp - GLView MFC CMainFrame class}
+{\footnote + overviews:0000} 
Module mainfrm.cpp - GLView MFC CMainFrame class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/MAINFRM.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes:
\par Notes: 
GLView toolbars are initialized here. 
OnQueryNewPalette & OnPaletteChanged are handled here and are passed to active view.
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Matrix.h_.2d_4.2a4_Matrix_class}
${\footnote $ Matrix.h - 4*4 Matrix class}
K{\footnote K modules; Matrix.h - 4*4 Matrix class}
+{\footnote + overviews:0000} 
Module Matrix.h - 4*4 Matrix class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/MATRIX.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Purpose:
\par Classes: 
{\uldb Matrix}{\v Matrix} 
{\uldb MatrixAndInverse}{\v MatrixAndInverse} 
{\uldb DecomposedMatrix}{\v DecomposedMatrix}
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # point.h_.2d_Generic_Point_.2b_Vector_.28.3d_Normal.29_class}
${\footnote $ point.h - Generic Point + Vector (= Normal) class}
K{\footnote K modules; point.h - Generic Point + Vector (= Normal) class}
+{\footnote + overviews:0000} 
Module point.h - Generic Point + Vector (= Normal) class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/POINT.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Generic Point + Vector (= Normal) class
\par Classes: 
{\b Point}\tab \tab three element vector x,y,z 
{\uldb Vector}{\v Vector}
\par {\uldb Plane}{\v Plane}\tab \tab a plane defined by normal and distance from origin
\par {\uldb BBox}{\v BBox}\tab \tab a box defined by min and may points
\par {\uldb Ray}{\v Ray}
\par Notes:
\par Changes:
\par Todo :\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b float x,y, z}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the 3d coordinates\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # PointA.cpp_.2d_Pointarray_classes_implementation}
${\footnote $ PointA.cpp - Pointarray classes implementation}
K{\footnote K modules; PointA.cpp - Pointarray classes implementation}
+{\footnote + overviews:0000} 
Module PointA.cpp - Pointarray classes implementation\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/POINTA.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose: 
Methods for 
BasicPointArray 
PointArray 
PointCurve
\par  
Classes:
\par Notes:
\par Changes:
\par Todo : 
change to malloc/realloc ?\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # QvEval.cpp_.2d_GLView_qv_node_conversion}
${\footnote $ QvEval.cpp - GLView qv node conversion}
K{\footnote K modules; QvEval.cpp - GLView qv node conversion}
+{\footnote + overviews:0000} 
Module QvEval.cpp - GLView qv node conversion\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/QVEVAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1996\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
EvalAs member functions
\par Notes:
\par Changes:
\par Todo :\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # tomesh.cpp_.2d_Convert_independent_triangles_to_large_triangle_meshes}
${\footnote $ tomesh.cpp - Convert independent triangles to large triangle meshes}
K{\footnote K modules; tomesh.cpp - Convert independent triangles to large triangle meshes}
+{\footnote + overviews:0000} 
Module tomesh.cpp - Convert independent triangles to large triangle meshes\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/TOMESH.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Kurt Akeley - 24 March 1988 
Paul Haeberli - 1990 
Derrick Burns - September 1990
\par  
The algorithm attempts to avoid leaving isolated triangles by 
choosing as the next triangle in a growing mesh that adjacent 
triangle with the minimum number of neighbors.\tab It will frequently 
produce a single, large mesh for a well behaved set of triangles.
\par To use, include the file mesh.h.
\par exports four routines:
\par Meshobj *newMeshobj( ... ) 
void in_ambegin( Meshobj * ) 
void in_amnewtri( Meshobj * ) 
void in_amvert( Meshobj *, long ) 
void in_amend( Meshobj * ) 
void freeMeshobj( Meshobj * )
\par calls back these routines: 
void out_ambegin( long nverts, long ntris ) 
void out_amend( void ); 
int out_amhashvert( long v ) 
int out_amvertsame( long v1, long v2 ) 
void out_amvertdata( long fptr ) 
void out_ambgntmesh( void ) 
void out_amendtmesh( void ) 
void out_amswaptmesh( void ) 
void out_amvert( long index )
\par on output the package calls:
\par void out_ambegin( long nverts, long ntris ) 
calls repeatedly: 
int out_amhashvert( long v ) 
int out_amvertsame( long v1, long v2 ) 
calls nverts times: 
void out_amvertdata( long fptr ) 
calls these in mixed sequence: 
void out_ambgntmesh( void ) 
void out_amvert( long index ) 
void out_amswaptmesh( void ) 
void out_amendtmesh( void ) 
void out_amend()\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WWW.h_.2d_GLView_WWW_access_.2b_file.2fextension_handling}
${\footnote $ WWW.h - GLView WWW access + file/extension handling}
K{\footnote K modules; WWW.h - GLView WWW access + file/extension handling}
+{\footnote + overviews:0000} 
Module WWW.h - GLView WWW access + file/extension handling\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Filename: C:/GLVIEW/SRC/CORE/WWW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Description\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copyright (c) 1995\tab by Holger Grahn 
All rights reserved
\par Purpose:
\par Classes: 
{\b GFile}
\par Notes:
\par Changes:
\par Todo :\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # AStream}
${\footnote $ AStream}
K{\footnote K classes; AStream}
+{\footnote + classes:0000} 
AStream Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class AStream}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 ASCii input output stream\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/ASTREAM.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # BBox}
${\footnote $ BBox}
K{\footnote K classes; BBox}
+{\footnote + classes:0000} 
BBox Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class BBox}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Bounding box 
holds a axis aligned extent as two points\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/POINT.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point mi, ma}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 box points\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox() : mi(BBOX_MAX), ma(BBOX_MIN)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor, set to empty\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox(const Point &p) : mi(p), ma(p)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor, set to single point\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox(const Point &pMin,const Point &pMax) : mi(pMin), ma(pMax)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor, set by two to single point\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox(const BBox &b)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor, set to BBox\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Set(const Point &p)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Set Bounding Box to single point\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetSize(const Point &p)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Set Bounding Box to new size, ma is recomputed\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Set(const BBox &b)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Set Bounding Box to other bbox\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetEmpty()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Set Bounding Box to Emtpy State\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Empty() const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Is Bounding box empty ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point Size() const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 return size of box\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void ScaleCenter(const Point &scale)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 scale box about center\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point Center() const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 return center of box\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox& Union(const Point &p)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Union this with Point p\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox& Union(const BBox &b)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Union this with BBox b\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Inside(const Point &p) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 is Point p inside ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Inside(const BBox &b) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 is BBox b inside ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Outside(const Point &p) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 is Point p outside ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Outside(const BBox &b) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 is BBox b outside ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b friend BBox operator*(const Matrix&, const BBox& b)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Transform boundingbox by Matrix\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b BBox& operator*=(const Matrix &m)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Transform boundingbox by Matrix\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__CDIB}
${\footnote $ CDIB::CDIB}
K{\footnote K functions; member functions; class member functions; CDIB::CDIB}
+{\footnote + functions:0000} 
CDIB::CDIB\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Constructs a CDIB object.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 CDIB();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 A 16 by 16 DIB is created with a gray scale color table.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB} {\uldb Create}{\v CDIB__Create}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__CopyBits}
${\footnote $ CDIB::CopyBits}
K{\footnote K functions; member functions; class member functions; CDIB::CopyBits}
+{\footnote + functions:0000} 
CDIB::CopyBits\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copy a rectangle of the DIB to another DIB.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void CopyBits(CDIB* pdibDest, int xd, int yd, 
int w, int h, int xs, int ys, COLORREF clrTrans = 0xFFFFFFFF);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pdibDest}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to the destination DIB.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i yd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i w}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the rectangle to be copied.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i h}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the rectangle to be copied.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ys}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i clrTrans}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 If this optional paramter is supplied\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Note: Only 8bpp DIBs are supported.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB} {\uldb StretchBits}{\v CDIB__StretchBits}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__Create}
${\footnote $ CDIB::Create}
K{\footnote K functions; member functions; class member functions; CDIB::Create}
+{\footnote + functions:0000} 
CDIB::Create\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Creates a CDIB object.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(int iWidth, int iHeight, CPalette* pPal = NULL);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(int iWidth, int iHeight, HPALETTE hPal);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(BITMAPINFO* pBMI, BYTE* pBits, BOOL bOwnBits = FALSE);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(BITMAPINFO* pPackedDIB);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i iWidth}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the new DIB.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i iHeight}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the new DIB.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 An optional pointer to a palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Handle to a palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pBMI}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to a BITMAPINFO structure.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pBits}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to a buffer containing the DIB bits.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i bOwnBits}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 If TRUE, the DIB will free the bits when it is 
destroyed. If FALSE, the bits remain the property of the caller.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPackedDIB}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to a packed DIB structure.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 If no palette is supplied, the DIB is created with a gray 
scale wash color table. The palette is used only to set the DIb's color 
table. If pBits is used, then the DIB will not delete these bits when the 
the DIB obejct is destroyed.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__DoubleBits}
${\footnote $ CDIB::DoubleBits}
K{\footnote K functions; member functions; class member functions; CDIB::DoubleBits}
+{\footnote + functions:0000} 
CDIB::DoubleBits\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Stretch a rectangle of the DIB 
by a facotr of 2 to another DIB.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void DoubleBits(CDIB* pdibDest, int xd, int yd, 
int xs, int ys, int ws, int hs, COLORREF clrTrans = 0xFFFFFFFF);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pdibDest}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to the destination DIB.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i yd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ys}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ws}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the source rectangle to be copied.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the source rectangle to be copied.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i clrTrans}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 If this optional paramter is supplied\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Note: Only 8bpp DIBs are supported.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB} {\uldb StretchBits}{\v CDIB__StretchBits}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__Draw}
${\footnote $ CDIB::Draw}
K{\footnote K functions; member functions; class member functions; CDIB::Draw}
+{\footnote + functions:0000} 
CDIB::Draw\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Draw the DIB to a given CDC.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(CDC* pDC, int x, int y);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(HDC hDC, int x, int y);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to a CDC object to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The DC to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i x}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The X coordinate of the DC at which the top-left 
corner of the DIB will be drawn..\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i y}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The Y coordinate of the DC at which the top-left 
corner of the DIB will be drawn..\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The DIB is drawn using StretchDIBits with DIB_RGB_COLORS so 
the operation is not fast.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__GetNumClrEntries}
${\footnote $ CDIB::GetNumClrEntries}
K{\footnote K functions; member functions; class member functions; CDIB::GetNumClrEntries}
+{\footnote + functions:0000} 
CDIB::GetNumClrEntries\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Get the number of color table 
entries.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 int GetNumClrEntries();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is the number of entries in the color table.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__GetPixelAddress}
${\footnote $ CDIB::GetPixelAddress}
K{\footnote K functions; member functions; class member functions; CDIB::GetPixelAddress}
+{\footnote + functions:0000} 
CDIB::GetPixelAddress\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Get a pointer to a given pixel.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void* GetPixelAddress(int x, int y);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is the address of the pixel or NUL if the coordinates are 
invalid. Note that for 1 and 4 bpp DIBs the pixel address is that of 
the byte containing the pixel. You must compute the actual pixel mask yourself.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i x}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the pixel.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i y}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the pixel.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 NOTE: DIB scan lines are DWORD aligned.  The scan line 
storage width may be wider than the scan line image width 
so calculate the storage width by rounding the image width 
to the next highest dword value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__GetRect}
${\footnote $ CDIB::GetRect}
K{\footnote K functions; member functions; class member functions; CDIB::GetRect}
+{\footnote + functions:0000} 
CDIB::GetRect\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Get the bounding rectangle.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void GetRect(CRect* pRect);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pRect}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to a CRect oject to receive the result.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__Load}
${\footnote $ CDIB::Load}
K{\footnote K functions; member functions; class member functions; CDIB::Load}
+{\footnote + functions:0000} 
CDIB::Load\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Load a DIB from a file or resource.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(CFile *fp);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(const char* pszFileName);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(WORD wResid);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the DIB is loaded, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i fp}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to an open CFile object.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pszFileName}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The name of the file to load the DIB from.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i wResid}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A resource ID to load the DIB from.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The file may be in either Windows DIB format or Presentation 
Manager DIB format.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__MapColorsToPalette}
${\footnote $ CDIB::MapColorsToPalette}
K{\footnote K functions; member functions; class member functions; CDIB::MapColorsToPalette}
+{\footnote + functions:0000} 
CDIB::MapColorsToPalette\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Map the colors in the DIB 
to a given palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL MapColorsToPalette(CPalette* pPal);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL MapColorsToPalette(HPALETTE hPal);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the colors are mapped, FALSE if an error 
occurs.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to the palette that the DIB 
colors are to be mapped to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A palette that the DIB 
colors are to be mapped to.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 This function assumes all CDIB objects have 256 color table entries.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__Save}
${\footnote $ CDIB::Save}
K{\footnote K functions; member functions; class member functions; CDIB::Save}
+{\footnote + functions:0000} 
CDIB::Save\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Save a DIB to a file.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(CFile *fp);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(const char* pszFileName);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the DIB is saved, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i fp}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to an open CFile object.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pszFileName}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The name of the file to save the DIB to.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The file  in always created in the Windows DIB format.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__SetColorTable}
${\footnote $ CDIB::SetColorTable}
K{\footnote K functions; member functions; class member functions; CDIB::SetColorTable}
+{\footnote + functions:0000} 
CDIB::SetColorTable\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Set the color table.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL SetColorTable(CPalette* pPal);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the color table 
is set, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to palette containing the set of 
colors.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Note that the DIB pixel values are not altered by this function 
but changing the color table will effectivly alter the colors of the DIB 
in some circumstances.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__StretchBits}
${\footnote $ CDIB::StretchBits}
K{\footnote K functions; member functions; class member functions; CDIB::StretchBits}
+{\footnote + functions:0000} 
CDIB::StretchBits\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Stretch a rectangle of the DIB to another DIB.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void StretchBits(CDIB* pdibDest, int xd, int yd, 
int wd, int hd, int xs, int ys, int ws, int hs, COLORREF clrTrans = 0xFFFFFFFF);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pdibDest}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to the destination DIB.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i yd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the destiantion rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i wd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ys}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of 
the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ws}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i clrTrans}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 If this optional paramter is supplied\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Note: Only 8bpp DIBs are supported.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB} {\uldb CopyBits}{\v CDIB__CopyBits}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIB__.7eCDIB}
${\footnote $ CDIB::~CDIB}
K{\footnote K functions; member functions; class member functions; CDIB::~CDIB}
+{\footnote + functions:0000} 
CDIB::~CDIB\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Constructs a CDIB object.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIB.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 ~CDIB();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The object is destroyed.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIB}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__Create}
${\footnote $ CDIBPal::Create}
K{\footnote K functions; member functions; class member functions; CDIBPal::Create}
+{\footnote + functions:0000} 
CDIBPal::Create\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Constructs a CDIBPal object.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(CDIB* pDIB);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(BITMAPINFO* pBMI);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(RGBQUAD* pRGB, int iClrs);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDIB}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to a CDIB object containing the color table 
tto be used to create the palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pBMI}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to a BITMAPINFO structure containing 
the color table to create the palette from.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pRGB}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to an array of RGBQUAD structures 
describing the colors for the palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i iClrs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The number of entries int he RGBQUAD array.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__CreateSystemColorPalette}
${\footnote $ CDIBPal::CreateSystemColorPalette}
K{\footnote K functions; member functions; class member functions; CDIBPal::CreateSystemColorPalette}
+{\footnote + functions:0000} 
CDIBPal::CreateSystemColorPalette\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create a color 
palette from just the 20 system reserved colors.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL CreateSystemColorPalette();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 This function creates a 256 color palette consisting of the 20 
reserved system colors, and the rest of the palette set to black. The entire palette 
is set so that a palette index value retrieved using GetNearestPaletteEntry 
will map directly to the hardware palette index value for that color.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__CreateWash}
${\footnote $ CDIBPal::CreateWash}
K{\footnote K functions; member functions; class member functions; CDIBPal::CreateWash}
+{\footnote + functions:0000} 
CDIBPal::CreateWash\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create a color cube wash palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL CreateWash();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 This function creates a 256 color palette consisting of the 20 
reserved system colors, a 6 by 6 by 6 RGB color cube and a 20 element 
gray scale. This isn't the best color cube in the world but it's sufficient 
for many simple purposes.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__Draw}
${\footnote $ CDIBPal::Draw}
K{\footnote K functions; member functions; class member functions; CDIBPal::Draw}
+{\footnote + functions:0000} 
CDIBPal::Draw\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Draw a representation of the palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(CDC* pDC, CRect* pRect, BOOL bBkgnd = FALSE);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(HDC hDC, RECT* pRect, BOOL bBkgnd = FALSE);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to a CDC object on which the palette is 
to be drawn.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The DC on which the palette is to be drawn.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pRect}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to a RECT desribing the area 
of the CDC to be used for drawing the palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pRect}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to a CRect object desribing the area 
of the CDC to be used for drawing the palette.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i bBkgnd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Used to determine if the palette will be selected 
as a background or foreground palette.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 By default the palette is selected as foreground if the application 
is in the foreground.  Setting bBkgnd to TRUE will force the palette to 
be realized in the background. The palette is always drawn as a 16 by 16 
grid. The first palette color is shown in the top-left grid square. The next 
color is shown to its right and so on.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__GetNumColors}
${\footnote $ CDIBPal::GetNumColors}
K{\footnote K functions; member functions; class member functions; CDIBPal::GetNumColors}
+{\footnote + functions:0000} 
CDIBPal::GetNumColors\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Get the number of colors in 
the palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 int GetNumColors();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is the number of colors in the palette.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__Load}
${\footnote $ CDIBPal::Load}
K{\footnote K functions; member functions; class member functions; CDIBPal::Load}
+{\footnote + functions:0000} 
CDIBPal::Load\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Load a palette from a file.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(const char* pszFileName);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(CFile* fp);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(UINT hFile);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(HMMIO hmmio);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pszFileName}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The name of the file to load the palette from.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i fp}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to an open CFile object to load the palette from.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hFile}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 An open file handle to load the palette from.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hmmio}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A HMMIO handle to load the palette from.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__Save}
${\footnote $ CDIBPal::Save}
K{\footnote K functions; member functions; class member functions; CDIBPal::Save}
+{\footnote + functions:0000} 
CDIBPal::Save\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Save a palette to a file.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(const char* pszFileName = NULL);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(CFile* fp);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(UINT hFile);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Save(HMMIO hmmio);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pszFileName}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The name of a file to save the palette 
to.  If no filename is given a File Save dialog box is presented to the 
user to get the name.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i fp}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A pointer to an open CFile object to save the palette to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hFile}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 An open file handle to save the palette to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hmmio}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 A HMMIO handle to save the palette to.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBPal__SetSysPalColors}
${\footnote $ CDIBPal::SetSysPalColors}
K{\footnote K functions; member functions; class member functions; CDIBPal::SetSysPalColors}
+{\footnote + functions:0000} 
CDIBPal::SetSysPalColors\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create an identity palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBPAL.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL SetSysPalColors();\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the function succeeds, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 By default the palette is selected as foreground if the application 
is in the foreground.  Setting bBkgnd to TRUE will force the palette to 
be realized in the background. The palette is always drawn as a 16 by 16 
grid. The first palette color is shown in the top-left grid square. The next 
color is shown to its right and so on.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBPal}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__BitBlt}
${\footnote $ CDIBSurface::BitBlt}
K{\footnote K functions; member functions; class member functions; CDIBSurface::BitBlt}
+{\footnote + functions:0000} 
CDIBSurface::BitBlt\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Blt a rectangle of the surface to 
a given CDC.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void BitBlt(CDC* pDC, int xd, int yd, int w, int h, int xs, int ys);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void BitBlt(HDC hDC, int xd, int yd, int w, int h, int xs, int ys);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The CDC to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The DC to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of the 
destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i yd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of the 
destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i w}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the rectangle to copy.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i h}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the rectangle to copy.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of the 
source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ys}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of the 
source rectangle.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The rectangle defined is copied from the source to the 
destination.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__Create}
${\footnote $ CDIBSurface::Create}
K{\footnote K functions; member functions; class member functions; CDIBSurface::Create}
+{\footnote + functions:0000} 
CDIBSurface::Create\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create a new surface.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(int cx, int cy, CPalette* pPal = NULL);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Create(int cx, int cy, HPALETTE hPal);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the surface is created, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i cx}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width in pixels.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i cy}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height in pixels.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 An optional pointer to a palette to use.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Handle to a palette.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The surface created can be drawn to using GDI operations or by 
direct manipulation of the pixels.  If a palette is provided, the palette 
must remain valid for the lifetime of the surface.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__Draw}
${\footnote $ CDIBSurface::Draw}
K{\footnote K functions; member functions; class member functions; CDIBSurface::Draw}
+{\footnote + functions:0000} 
CDIBSurface::Draw\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Draw a section of the off-screen 
image buffer to the screen.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(CDC* pDC);\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void Draw(HDC hDC);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The CDC object to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The DC to draw to.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The entire surface is drawn to the top-left corner of the supplied 
CDC.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__Load}
${\footnote $ CDIBSurface::Load}
K{\footnote K functions; member functions; class member functions; CDIBSurface::Load}
+{\footnote + functions:0000} 
CDIBSurface::Load\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Load the surface from a file.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 BOOL Load(const char* pszFileName);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The return value is TRUE if the DIB is loaded, FALSE if not.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pszFileName}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The name of the file to load the DIB from.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The file may be in either Windows DIB format or Presentation 
Manager DIB format.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__SetPalette}
${\footnote $ CDIBSurface::SetPalette}
K{\footnote K functions; member functions; class member functions; CDIBSurface::SetPalette}
+{\footnote + functions:0000} 
CDIBSurface::SetPalette\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Set a new palette.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void SetPalette(CPalette* pPal);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pPal}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Pointer to the new palette.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CDIBSurface__StretchBlt}
${\footnote $ CDIBSurface::StretchBlt}
K{\footnote K functions; member functions; class member functions; CDIBSurface::StretchBlt}
+{\footnote + functions:0000} 
CDIBSurface::StretchBlt\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Blt a rectangle of the surface to 
a given CDC.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/DIBSURF.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Syntax\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 void StretchBlt(CDC* pDC, int xd, int yd, int wd, int hd, 
int xs, int ys, int ws, int hs);\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Return Value\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 There is no return value.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i pDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The CDC to draw to.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of the 
destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i yd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of the 
destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i wd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hd}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the destination rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i xs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The x coordinate of the top-left corner of the 
source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ys}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The y coordinate of the top-left corner of the 
source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i ws}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The width of the source rectangle.\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hs}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 The height of the source rectangle.\par 

\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Comments\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 The rectangle defined is copied from the source to the 
destination.\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 See Also\par \pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b CDIBSurface}\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # CMyglView}
${\footnote $ CMyglView}
K{\footnote K classes; CMyglView}
+{\footnote + classes:0000} 
CMyglView Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class CMyglView}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 MFC GLView view class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/GLVVIEW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b COpenGL * m_glptr}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 COpenGl object, manages WindowsOpenGl context, pixelformat and palette\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GView\tab * view}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GView objects contains the renderState and model information\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DObjNew\tab \tab * m_dObjectNew}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DObjNew dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DNewFontLogo * m_dNewFontLogo}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DNewFontLogo dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DTime\tab \tab * m_dTime}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DTime dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DMorph\tab \tab * m_dMorph}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DMorph dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DDeformSphere * m_dDeformSphere}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DDeformSphere dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DOpenUrl * m_dOpenUrl}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DOpenUrl dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DViewpoint * m_dViewpoint}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DViewpoint dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DTreeEditor * m_dTreeEditor}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DTreeEditor dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int EditColor(const char *prompt, Point &color)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 edit a single color using standard dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Message(const char *message,int messageType = 0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 displays a message to the status bar with update\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual BOOL OnIdle(LONG lcount)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 turn of animating 
LastTime = GetTime());\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Redraw()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Mark view for redraw, e.g. after settings or model have been changed\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReadModel(const char *FileName)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read model\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReadUrl(const char *Url)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read url\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int WriteModel(const char *FileName)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read model\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ComputeExtrudedShell}
${\footnote $ ComputeExtrudedShell}
K{\footnote K functions; ComputeExtrudedShell}
+{\footnote + functions:0000} 
ComputeExtrudedShell\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GShell *} {\b ComputeExtrudedShell(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compute extruded version of shell\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.CPP\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ComputeExtrudedShell}
${\footnote $ ComputeExtrudedShell}
K{\footnote K functions; ComputeExtrudedShell}
+{\footnote + functions:0000} 
ComputeExtrudedShell\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GShell *} {\b ComputeExtrudedShell(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compute extruded version of shell\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ComputeGlyphOutline}
${\footnote $ ComputeGlyphOutline}
K{\footnote K functions; ComputeGlyphOutline}
+{\footnote + functions:0000} 
ComputeGlyphOutline\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b ComputeGlyphOutline(}{\b HDC} {\i hDC}{\b , const char *} {\i text}{\b , float &} {\i x}{\b , int} {\i duplicateHardPts}{\b , GShell &} {\i s}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compute a polygonal outline for string text 
from a true tpye font\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GFONT.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i hDC}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 a Windows DC with a TrueType font selected\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i text}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the input text, to compute a polygon outline for\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i x}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 starting x,y position, will be updated after the call to new position 
0.0\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i duplicateHardPts}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 if true all vertices of line segments will be duplicated, to create hard edges for 3d extrsuion\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i s}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the output {\uldb GShell}{\v GShell} ("2d"), will contain faces with holes\par 

\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ComputeGlyphOutline}
${\footnote $ ComputeGlyphOutline}
K{\footnote K functions; ComputeGlyphOutline}
+{\footnote + functions:0000} 
ComputeGlyphOutline\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b void} {\b ComputeGlyphOutline(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compute a polygonal outline for character letter\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GFONT.CPP\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # ComputeGlyphOutline}
${\footnote $ ComputeGlyphOutline}
K{\footnote K functions; ComputeGlyphOutline}
+{\footnote + functions:0000} 
ComputeGlyphOutline\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b ComputeGlyphOutline(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compute a polygonal outline for string text 
from a true tpye font\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GFONT.CPP\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # copylist}
${\footnote $ copylist}
K{\footnote K functions; copylist}
+{\footnote + functions:0000} 
copylist\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b void} {\b copylist(}{\b int *} {\i dest}{\b , const int *} {\i src}{\b , int} {\i cnt}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Copy a list of integers\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GUTILS.CPP\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i dest}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 destination pointer\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i src}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 source pointer\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i cnt}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 number of elements to copy\par 

\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # DecomposedMatrix}
${\footnote $ DecomposedMatrix}
K{\footnote K classes; DecomposedMatrix}
+{\footnote + classes:0000} 
DecomposedMatrix Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class DecomposedMatrix}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 compound a certain class of matrix as 
composed out of simple transformations\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/MATRIX.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # DNewFontLogo}
${\footnote $ DNewFontLogo}
K{\footnote K classes; DNewFontLogo}
+{\footnote + classes:0000} 
DNewFontLogo Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class DNewFontLogo}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 DNewFontLogo dialog\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/DOBJNEW.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b CMyglView * m_pView}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 view for this dialog\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b LOGFONT m_lf}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 logical font description\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # DObjNew}
${\footnote $ DObjNew}
K{\footnote K classes; DObjNew}
+{\footnote + classes:0000} 
DObjNew Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class DObjNew}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 DObjNew dialog\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/DOBJNEW.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GEdgeList}
${\footnote $ GEdgeList}
K{\footnote K classes; GEdgeList}
+{\footnote + classes:0000} 
GEdgeList Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GEdgeList}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 EdgeList array, storing a list of edges by 2 vertex indices\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GFaceGroup}
${\footnote $ GFaceGroup}
K{\footnote K classes; GFaceGroup}
+{\footnote + classes:0000} 
GFaceGroup Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GFaceGroup}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Information on a set of faces\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLI.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GFaceList}
${\footnote $ GFaceList}
K{\footnote K classes; GFaceList}
+{\footnote + classes:0000} 
GFaceList Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GFaceList}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 FaceList array storing a set of faces by vertex index\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetPolygon(int n)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute a facelist for a single polygon of n vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetGrid(int rows,int cols,int quads=1,int closeCols=0,int closeRows=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute a Facelist for a Grid like topology\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void AppendEdge(int i1, int i2)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a edge given two vertex indices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void AppendTri(int i1, int i2,int i3)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a triangle given 3 indices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void AppendQuad(int i1, int i2,int i3,int i4)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a quadrangle given 4 indices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int GetFaceOffset(int nth)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 find/return offset of "nth" face in facelist\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int GetFaceCount(int offset=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute # faces for facelist, starting with an optional offset\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int GetFaceCount(int offset,int *holecnt,int *tricnt)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute # faces for facelist, starting with an optional offset + hole + triangle counters\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int GetFaceSize(int offset=0,int cnt=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute size of cnt faces starting at offset in array elements\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int GetTriangleCount(int offset=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute # triangles for facelist, starting with an optional offset (not correct for holes & nonconvex polys)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReverseFaces(int offset=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 reverse the direction of individual facest\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int DeleteNth(int nth=0,int cnt=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Delete cnt faces starting a face number #nth\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i tesselateFaceList}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 input facelist\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i v}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 corresponding vertices for indices in f\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i vmap}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 optional vertex map table\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i newf}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 output: triangulated facelist\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i new2old}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 output : optional mapping from new triangles to old face indices\par 

\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\i theShell}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 optional shell to append vertices too\par 

\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GMesh}
${\footnote $ GMesh}
K{\footnote K classes; GMesh}
+{\footnote + classes:0000} 
GMesh Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GMesh}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a 2 d Array of vertices\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GEvalAs_TYPE* EvalAs(TypeId type,int copyAttributes=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Evaluate object as object of type "type" 
if return = this, don\'b4t destroy result, otherwise destroy\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GModel}
${\footnote $ GModel}
K{\footnote K classes; GModel}
+{\footnote + classes:0000} 
GModel Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GModel}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a 3d model\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GMODEL.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GPolygon}
${\footnote $ GPolygon}
K{\footnote K classes; GPolygon}
+{\footnote + classes:0000} 
GPolygon Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GPolygon}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a single face\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GPolygon(int np=0, const Point *p=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor given a {\b Point} array\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GPolyline}
${\footnote $ GPolyline}
K{\footnote K classes; GPolyline}
+{\footnote + classes:0000} 
GPolyline Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GPolyline}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a single polyline\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GPolyline(int np=0, const Point *p=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor given a {\b Point} array\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GRotSweep}
${\footnote $ GRotSweep}
K{\footnote K classes; GRotSweep}
+{\footnote + classes:0000} 
GRotSweep Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GRotSweep}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 computes a rotational sweep / object of revolution\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShell}
${\footnote $ GShell}
K{\footnote K classes; GShell}
+{\footnote + classes:0000} 
GShell Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GShell}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a set of vertices + faces\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int Update()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Check for Recomputation of cached values (e.g. Normals), 1 if redraw\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int UpdateActions()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 update actions, based on edit flags\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual GShell* CopyGeometry(GShell *dest=0) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 copy raw geometry\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual GShell* Copy(GShell *dest=0) const}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 copy including attributes\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetV(int new_nv,const Point *new_v)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Set Vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetVN(int n_vn,const Point *new_vn,int normalize=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set vertex normals for vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetVC(int n_vn,const Point *new_vc)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set vertex colors\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetVP(int n_vp,const Point *new_vp)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set vertex (texture) parameters\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetFN(int n_fn,const Point *new_fn,int normalize=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set face normals\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetFC(int n_fc,const Point *new_fc)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set face colors\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetFCIndex(int n_fci,const int *new_fci)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set face colors index table\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetFaceList(int new_nf,const int *new_f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set face list (list of polygons by vertex indices)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetPrimitiveList(int new_np,const int *new_prims)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set primitive list = (optimized opengl primitives)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetEdgeList(int new_ne,const int *new_e)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set edgelist (format v1 v2 ...) connect v1 v2 with a edge\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int FindNearestV(const Point &p,float &distance2)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Find nearest point in vertex table\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b static float maxLookupDistance2}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 distance squared up to that points are considered equal on lookup\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetMaxLookupDistance(float r)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set distance up to that points are considered equal on lookup\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendV(const Point &p,int doLookup=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a single point to v list, optionally with lookup\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendV(const PointArray &p,int doLookup=1,IntArray *old2new=0, const Matrix *m=NULL)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a list of points, optionally lookup points and return vertex indices in old2new 
transform points, if optional attribute m is present\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetVertexCnt()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get number of vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int AppendVertex(const Point &p,int doLookup)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a single vertex given by a single point, optionally with lookup\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int AppendVertex(const PointArray &p,int doLookup,IntArray *old2new)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a list of points, optionally lookup points and return vertex indices in old2new\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendFacelist(IntArray &p,int doLookup=1,IntArray *old2new=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append facelist, optionally map vertex indices by old2new\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendEdge(Point &p1,Point &p2,int doLookup=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a single edge\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendTriangle(Point &p1,Point &p2, Point &p3,int doLookup=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a single triangle\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendPolygon(const PointArray &pts,int doLookup=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a single polygon\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int Append(GShell &s,int doLookup=1, const Matrix *m=NULL)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append whole shell\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int DeleteFaces(int nthOffset,int cnt=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Delete cnt faces starting at face # nthOffset,\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int DeleteVerts(int nthOffset,int cnt=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Delete cnt verts starting at vert # nthOffset,\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void ComputeBBox(BBox &box)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute bounding box from all vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual BBox & GetBBox()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get bounding box from all vertices, will be recomputed if not up to date\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void ComputeCenter(Point &center)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute the center of all points by averaging\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputeTriangles(GFaceList &tri,IntArray &tri2face,int useTriangulator=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute a facelist containing triangles only in tri 
tri2face maps triangle # i to shells face number #fi 
Return: number of triangles\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int Triangulate()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 triangulate shell\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void GetVertexParametersNative(int n,Point *vp)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute native vertex parameters for object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetVertex(int i, GVertex &vert)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get all vertex data for vertex i, 
if values are not present they will not be stored\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int SetVertex(int i, const GVertex &vert)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set all vertex data for vertex i, 
if value arrays are not present or to short, values will not be stored\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetVertexI(int i, GVertexI &vert)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get all vertex data for vertex i by index, 
if values are not present they will not be stored\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputeMaxVertexI( GVertexI &vert)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute the maximum number / length of vertex data for by index,\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual GVertexI& GetMaxI()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get the maximum number/ length of vertex data by index, recomputed if not up to date\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int CountFaces()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 count number of faces in face list\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetFaceCount()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 return number of faces\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetFaceList(GFaceList &flist)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get a facelist of shell\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void ComputeFaceNormals(int allocFaceinfo=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute face normals from geometry\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputeVertexNormals()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute vertex normals from geometry 
this normally includes calling compute face normals\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int FlipNormals()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 flip normals during computation of faces normals == this propagates to vertexnormals\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputeEdgeList()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute edge list (e.g. from facelist)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetFlag(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set a shell flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int UnSetFlag(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 clear a shell flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetEditFlag(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set a edit flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int UnSetEditFlag(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 clear a edit flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetAction(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set a shell action flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int UnSetAction(int f)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 clear a shell action flag, multiple values can be or-ed together\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetChanged()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 mark edit flags, that object has been changed\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void UnSetChanged()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 clear all edit flags\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Changed()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 has something on object been changed ?\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual GEvalAs_TYPE* EvalAs(TypeId type,int copyAttributes=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Evaluate object as object of type "type" 
if return = this, don\'b4t destroy result, otherwise destroy\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlFaces(RenderState &state,int FN=1, int VN=0, int VC=0, int VP=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering faces of shell directly to OpenGL, either parse f list or prims\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlEdges(RenderState &state,int VN=0,int VC=0,int VP=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering edges / edgetable of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlVertices(RenderState &state,int VN=0,int\tab \tab VC=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering vertices of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlNormals(RenderState &state,float scale=0.2,int VN=1,int FN=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering normals of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlBBox(RenderState &state)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering Bounding box of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int glRender(RenderState &state)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering  shell directly to OpenGL using RenderGL members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputePrimitiveList(int flags=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute primitive list (= e.g. build triangle strips)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int io(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 input/output to AStream\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Do(GglRenderTraversal &state)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GClass do glRendering traversal\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Do(GBBoxTraversal &state)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GClass do boundingbox traversal\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b ifdef _HMF}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GClass do ray selection 
declared in GShell.h implmented in GRaySelect\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GClass do ray intersection with ray 
declared in GShell.h implmented in GRaySelect $2}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 $4\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WriteHmf(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write shell to AStream in HMF format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WriteGeo(AStream &a,int outputNormals=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write to GEO polygon format (optional with normals)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WriteStl(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write to STL triangle format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WritePov(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write to POV Ray-tracer format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WriteRaw(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write to RAW triangle format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int WriteVrml(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 write shell to AStream in VRML format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int Do(GioTraversal &state)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GClass io Traversal\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GShellI}
${\footnote $ GShellI}
K{\footnote K classes; GShellI}
+{\footnote + classes:0000} 
GShellI Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GShellI}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a GShell derived object 
Each (logical) vertex can share individually v,p,c,n vertex attributes. 
So a vertex coordinate can be defined once, different vertices can share 
this coordinate using the coordinate index, but each vertex can have a 
different color / normal / texture index. 
Usefull for objects like cylinders, sweeps, objects with "hard" 
edges.\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLI.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Array<GVertexI> verts}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 array of vertices 
each vertex can have independent attribute indices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int Update()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Check for Recomputation of cached values (e.g. Normals), 1 if redraw\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int GetVertexCnt()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get number of vertices\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Array<GFaceGroup> fgroup}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Facegroup support 
mapping face index to fgroup\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int FindFaceGroup(const char *name)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Lookup Group with name name, return index or -1 if not found\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AppendFaceGroup(GFaceGroup &NewGroup)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 append a new face group\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ComputeFaceColorsFromGroups()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute face colors from group tables\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GEvalAs_TYPE* EvalAs(TypeId type,int copyAttributes=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Evaluate object as object of type "type" 
if return = this, don\'b4t destroy result, otherwise destroy\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GSphereSubdiv}
${\footnote $ GSphereSubdiv}
K{\footnote K classes; GSphereSubdiv}
+{\footnote + classes:0000} 
GSphereSubdiv Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GSphereSubdiv}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Sphere drawing by directly using a recursive algorithm\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void ComputeBBox(BBox &box)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute bounding box\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void ComputeCenter(Point &center)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute the center\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int ComputeTriangles(GFaceList &tri,IntArray &tri2face,int useTriangulator=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Compute a facelist containing triangles only in tri 
tri2face maps triangle # i to shells face number #fi 
Return: number of triangles\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlFaces(RenderState &state,int FN=1, int VN=0, int VC=0, int VP=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering faces of shell directly to OpenGL, either parse f list or prims\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlEdges(RenderState &state,int VN=0,int VC=0,int VP=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering edges / edgetable of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlVertices(RenderState &state,int VN=0,int\tab \tab VC=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering vertices of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void RenderGlNormals(RenderState &state,float scale=0.2,int VN=1,int FN=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 rendering normals of shell directly to OpenGL\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GEvalAs_TYPE* EvalAs(TypeId type,int copyAttributes=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Evaluate object as object of type "type" 
if return = this, don\'b4t destroy result, otherwise destroy\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GClass do ray selection 
declared in GGeom.h implmented in GRaySelect Empty FieldEmpty Field}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Empty Field\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GSweep}
${\footnote $ GSweep}
K{\footnote K classes; GSweep}
+{\footnote + classes:0000} 
GSweep Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GSweep}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 computes a translational sweep / extrusion\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GVertex}
${\footnote $ GVertex}
K{\footnote K classes; GVertex}
+{\footnote + classes:0000} 
GVertex Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GVertex}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GVertex, all vertex data in one structure,\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point v}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex coordinates\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point n}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex normal\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point c}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex color\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point p}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex parameter\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Zero()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Zero out values\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b friend GVertex& Interpolate(const GVertex& A,float ta, const GVertex& B,float tb, GVertex &Result)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 interpolate two GVertex, Result = A*ta + B * tb\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int io(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 io\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GVertexI}
${\footnote $ GVertexI}
K{\footnote K classes; GVertexI}
+{\footnote + classes:0000} 
GVertexI Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GVertexI}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 GVertexI, all vertex data in one structure, but by index array reference\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int v}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex coordinate index\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int n}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex normal index\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int c}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex color index\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int p}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the vertex parameter index\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Zero()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Zero out values to -1\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int operator==( const GVertexI &b)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compare for equality\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int io(AStream &a)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 io\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GView}
${\footnote $ GView}
K{\footnote K classes; GView}
+{\footnote + classes:0000} 
GView Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class GView}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a view of a 3d model\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GMODEL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GView(GModel *Model=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 constructor\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b ~GView()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 destructor\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GTime time}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the current animation time\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b RenderState renderState}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the gl {\b RenderState} object, maintains/reflects current rendering settings\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GShell * theShell}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the model data set as one single {\uldb GShell}{\v GShell} object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GShell * backupShell}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 original version of the model data set, if deformations has been applied\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GWorld * theWorld}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the model data set as a scene tree\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b QvScene * theScene}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the scene\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b QvSceneInfo * sceneInfo}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 information about the scene\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GWorld* GetWorld()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 get the model scene tree\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetShell(GShell *shell,int resetCamera=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the current model to {\uldb GShell}{\v GShell} object shell\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetNode(QvNode *root,int resetCamera=1)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the current model to {\b QvNode} object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GCamera * camera}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the current Camera of the view\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GCamera & GetCamera()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 return a reference to the current Camera of the view\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int LoadAllInlines(int oneOnly = 0,int textures=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 load all inlines\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReadModel(const char *FileName,int fmt)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read a model from a 3d file\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReadShell(const char *FileName,int fmt)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read a single shell object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ReadTexturedPolygon(const char *FileName,int format)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 build a shell by assigning a image texture to a rectangle\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetTexture(const char *FileName,int format=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 load a global texture\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int EditTexture(const char *FileName,int format=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 load a global texture\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int ClearTexture()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 unload the global texture\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void CameraReset()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Reset the camera to the default view (x-y plane)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetCamera(QvNode *cameraNode,const Matrix *cameraTransform=NULL,int animate=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the camera to the Camera node , with optional transformation matrix\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int AnimateToCamera(QvNode *cameraNode,const Matrix *cameraTransform=NULL)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the camera to the Camera node , with optional transformation matrix\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetCamera(const char *cameraName)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the camera to the Camera node\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b glCache modelCache}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 cached version of model\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void InvalidateModelCache()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 invalidate cached version of model, if any 
necessary if model data have been changed\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void SetDefaultTextureParameters()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set default gl texture parameter generation, if no 
texture parameters are present for theShell\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetRenderMode(GRenderMode newMode)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set the current render mode to a predefined {\b GRenderMode} setting\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b CString material}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 read the current material from a material file\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int SetContext(int canDisplayShareLists=0)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 set all OpenGL State variables 
used to render to a bitmap context\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Initialize(HWND hWnd)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 initialize, given a window handle\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void DrawScene(RECT rc)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 render the model\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Resize(HWND hWnd)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 handle a resize message (OnSize)\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void Resize(RECT &rect)}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 handle a resize to rectangle\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GDeform * deformer}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the current deformer object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GParameter * parameter}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 the current shell parametrization object\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b int BuildShell()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 build one shell from the tree model & replace current model\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # InitImageTexture}
${\footnote $ InitImageTexture}
K{\footnote K functions; InitImageTexture}
+{\footnote + functions:0000} 
InitImageTexture\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b InitImageTexture(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 load a image texture\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GLUTILS.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Matrix}
${\footnote $ Matrix}
K{\footnote K classes; Matrix}
+{\footnote + classes:0000} 
Matrix Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class Matrix}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a 4*4 float transformation matrix\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/MATRIX.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # MatrixAndInverse}
${\footnote $ MatrixAndInverse}
K{\footnote K classes; MatrixAndInverse}
+{\footnote + classes:0000} 
MatrixAndInverse Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class MatrixAndInverse}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 inverse is stored along with matrix\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/MATRIX.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b void ComputeInverse()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 compute/update the inverse of the current matrix\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # NewCircle}
${\footnote $ NewCircle}
K{\footnote K functions; NewCircle}
+{\footnote + functions:0000} 
NewCircle\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GPolygon *} {\b NewCircle(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create a GPolygon primitive with circle data\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.CPP\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # NewCircle}
${\footnote $ NewCircle}
K{\footnote K functions; NewCircle}
+{\footnote + functions:0000} 
NewCircle\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GPolygon *} {\b NewCircle(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Create a GPolygon primitive with circle data\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # NewSphere}
${\footnote $ NewSphere}
K{\footnote K functions; NewSphere}
+{\footnote + functions:0000} 
NewSphere\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GShell *} {\b NewSphere(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 create a shell with sphere data\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # NewSphere}
${\footnote $ NewSphere}
K{\footnote K functions; NewSphere}
+{\footnote + functions:0000} 
NewSphere\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b GShell *} {\b NewSphere(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 create a shell with sphere data\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GGEOM.CPP\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Plane}
${\footnote $ Plane}
K{\footnote K classes; Plane}
+{\footnote + classes:0000} 
Plane Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class Plane}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a 3d plane stored as normal + offset from origin\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/POINT.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Ray}
${\footnote $ Ray}
K{\footnote K classes; Ray}
+{\footnote + classes:0000} 
Ray Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class Ray}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a Ray starting at p, going into direction d\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/POINT.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Point p}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 startpoint\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Vector d}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 direction vector\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # RayRange}
${\footnote $ RayRange}
K{\footnote K classes; RayRange}
+{\footnote + classes:0000} 
RayRange Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class RayRange}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 a Ray starting at p, going into direction d 
in addition to ray an range is stored, and direction is normalized\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/POINT.H\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # root_object_of_graphical_output_objects}
${\footnote $ root object of graphical output objects}
K{\footnote K classes; root object of graphical output objects}
+{\footnote + classes:0000} 
root object of graphical output objects Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class root object of graphical output objects}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Empty Field\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELL.H\par 
\pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Class Members\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void SetChanged()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Evaluate current state of object, to process or to render 
virtual GObject* Eval() \{ return(this); \}\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b Mark object as changed $2}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 $4\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual void UnSetChanged()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Mark object as unchanged\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b virtual int Changed()}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 is object changed =\par 
\page
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # Vector}
${\footnote $ Vector}
K{\footnote K classes; Vector}
+{\footnote + classes:0000} 
Vector Class\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b class Vector}\par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 same as Point, but stores a direction vector\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/POINT.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellGeo}
${\footnote $ WriteShellGeo}
K{\footnote K functions; WriteShellGeo}
+{\footnote + functions:0000} 
WriteShellGeo\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellGeo(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in GEO format, if outputNormals set, VN will be output\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellHmf}
${\footnote $ WriteShellHmf}
K{\footnote K functions; WriteShellHmf}
+{\footnote + functions:0000} 
WriteShellHmf\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellHmf(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in HMF format\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellPov}
${\footnote $ WriteShellPov}
K{\footnote K functions; WriteShellPov}
+{\footnote + functions:0000} 
WriteShellPov\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellPov(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in POV format\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellRaw}
${\footnote $ WriteShellRaw}
K{\footnote K functions; WriteShellRaw}
+{\footnote + functions:0000} 
WriteShellRaw\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellRaw(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in RAW format\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellStl}
${\footnote $ WriteShellStl}
K{\footnote K functions; WriteShellStl}
+{\footnote + functions:0000} 
WriteShellStl\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellStl(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in STL format\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # WriteShellVrml}
${\footnote $ WriteShellVrml}
K{\footnote K functions; WriteShellVrml}
+{\footnote + functions:0000} 
WriteShellVrml\par 
\pard \plain \li240\sa160\sl240 \f2\fs20\lang1033 {\b int} {\b WriteShellVrml(void}{\b ) }\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 write shell s to file FileName in VRML format\par 
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/GSHELLIO.H\par 
\page \pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 
#{\footnote # GFileFormats}
${\footnote $ GFileFormats}
K{\footnote K types; enumeration types; GFileFormats}
+{\footnote + types:0000} 
\pard\plain \s254\li240\sb200\sa80\sl440 \b\f0\fs36\lang1033 GFileFormats\par
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 enum GFileFormats \{\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab UNKNOWN_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab HMF_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab GEO_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab D3V_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab RAW_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab OBJ_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab STL_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab DXF_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab POV_FMT,\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \tab VRML_FMT\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \};\par 
\pard\plain \s28\li240\sl220\tx732\tx1224\tx1716\tx2208\tx2700\tx3192\tx3684\tx4176\tx4668\tx5160\tx5652\tx6144\tx6636\tx7128\tx7620 \f17\fs20\lang1033 \par 

\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 enumerations for different 3d file formats\par
\pard\plain \li240\sa160\sl240 \f2\fs20\lang1033 Defined in: C:/GLVIEW/SRC/CORE/WWW.H\par \pard\plain \s46\li240\sb20\sl220 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b UNKNOWN_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 unknown\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b HMF_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 HMF\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b GEO_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 GEO e.g. 3dr\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b D3V_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 3DV native GLView format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b RAW_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 RAW triangle data\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b OBJ_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 Wavefront obj format\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b STL_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 STL triangle format ascii\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b DXF_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 DXF\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b POV_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 POV 2.0 Ray-tracer\par 
\pard\plain \s50\li240\sl240 \f2\fs20\lang1033 {\b VRML_FMT}\par 
\pard\plain \s54\li480\sa80\sl240 \f2\fs20\lang1033 VRML 1.0 ascii format\par 
}
