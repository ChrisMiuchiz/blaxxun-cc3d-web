// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "blaxxuncc3d.h"

/////////////////////////////////////////////////////////////////////////////
// CblaxxunCC3D

IMPLEMENT_DYNCREATE(CblaxxunCC3D, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CblaxxunCC3D properties

long CblaxxunCC3D::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

CString CblaxxunCC3D::GetUrl()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetUrl(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CblaxxunCC3D::GetRenderMode()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetRenderMode(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CblaxxunCC3D::GetNavigationMode()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetNavigationMode(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

short CblaxxunCC3D::GetHeadlight()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetHeadlight(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

float CblaxxunCC3D::GetWalkSpeed()
{
	float result;
	GetProperty(0x5, VT_R4, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetWalkSpeed(float propVal)
{
	SetProperty(0x5, VT_R4, propVal);
}

BOOL CblaxxunCC3D::GetAnimateAllViewpoints()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetAnimateAllViewpoints(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

CString CblaxxunCC3D::GetViewpoint()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetViewpoint(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CblaxxunCC3D::GetDescription()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetDescription(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CblaxxunCC3D::GetWorld()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetWorld(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

BOOL CblaxxunCC3D::GetCollisionDetection()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetCollisionDetection(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

float CblaxxunCC3D::GetAvatarHeight()
{
	float result;
	GetProperty(0xb, VT_R4, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetAvatarHeight(float propVal)
{
	SetProperty(0xb, VT_R4, propVal);
}

float CblaxxunCC3D::GetCollisionDistance()
{
	float result;
	GetProperty(0xc, VT_R4, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetCollisionDistance(float propVal)
{
	SetProperty(0xc, VT_R4, propVal);
}

float CblaxxunCC3D::GetVisibilityLimit()
{
	float result;
	GetProperty(0xd, VT_R4, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetVisibilityLimit(float propVal)
{
	SetProperty(0xd, VT_R4, propVal);
}

BOOL CblaxxunCC3D::GetGravity()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CblaxxunCC3D::SetGravity(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CblaxxunCC3D operations

void CblaxxunCC3D::OnNextViewpoint()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CblaxxunCC3D::OnPrevViewpoint()
{
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CblaxxunCC3D::getName()
{
	CString result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CblaxxunCC3D::getVersion()
{
	CString result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

float CblaxxunCC3D::getCurrentSpeed()
{
	float result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CblaxxunCC3D::getCurrentFrameRate()
{
	float result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

CString CblaxxunCC3D::getWorldURL()
{
	CString result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CblaxxunCC3D::replaceWorld(LPUNKNOWN nodes)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nodes);
}

void CblaxxunCC3D::loadURL(LPCTSTR url, LPCTSTR parameter)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 url, parameter);
}

void CblaxxunCC3D::setDescription(LPCTSTR description)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 description);
}

LPUNKNOWN CblaxxunCC3D::createVrmlFromString(LPCTSTR vrmlSyntax)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		vrmlSyntax);
	return result;
}

void CblaxxunCC3D::createVrmlFromURL(LPCTSTR url, LPDISPATCH node, LPCTSTR event)
{
	static BYTE parms[] =
		VTS_BSTR VTS_DISPATCH VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 url, node, event);
}

LPUNKNOWN CblaxxunCC3D::getNode(LPCTSTR name)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		name);
	return result;
}

void CblaxxunCC3D::addRoute(LPUNKNOWN fromNode, LPCTSTR fromEventOut, LPUNKNOWN toNode, LPCTSTR toEventIn)
{
	static BYTE parms[] =
		VTS_UNKNOWN VTS_BSTR VTS_UNKNOWN VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fromNode, fromEventOut, toNode, toEventIn);
}

void CblaxxunCC3D::deleteRoute(LPUNKNOWN fromNode, LPCTSTR fromEventOut, LPUNKNOWN toNode, LPCTSTR toEventIn)
{
	static BYTE parms[] =
		VTS_UNKNOWN VTS_BSTR VTS_UNKNOWN VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fromNode, fromEventOut, toNode, toEventIn);
}

LPUNKNOWN CblaxxunCC3D::createNode(LPCTSTR nodeclass)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		nodeclass);
	return result;
}

void CblaxxunCC3D::addNode(LPUNKNOWN node)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 node);
}

LPDISPATCH CblaxxunCC3D::getWorld()
{
	LPDISPATCH result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CblaxxunCC3D::beginUpdate()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CblaxxunCC3D::endUpdate()
{
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CblaxxunCC3D::setTimerInterval(long interval)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		interval);
	return result;
}

BOOL CblaxxunCC3D::isSceneLoaded()
{
	BOOL result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CblaxxunCC3D::setNodeName(LPUNKNOWN node, LPCTSTR name)
{
	static BYTE parms[] =
		VTS_UNKNOWN VTS_BSTR;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 node, name);
}

CString CblaxxunCC3D::getNodeName(LPUNKNOWN node)
{
	CString result;
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		node);
	return result;
}

LPUNKNOWN CblaxxunCC3D::getEventOut(LPCTSTR eventOutName)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		eventOutName);
	return result;
}

LPUNKNOWN CblaxxunCC3D::getEventIn(LPCTSTR eventInName)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		eventInName);
	return result;
}

CString CblaxxunCC3D::getControlPathname()
{
	CString result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CblaxxunCC3D::saveWorld(LPCTSTR fileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fileName);
	return result;
}

void CblaxxunCC3D::saveViewpoint(LPCTSTR viewpointName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 viewpointName);
}

BOOL CblaxxunCC3D::setFullscreen(BOOL mode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		mode);
	return result;
}

BOOL CblaxxunCC3D::removeNode(LPUNKNOWN node)
{
	BOOL result;
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		node);
	return result;
}

BOOL CblaxxunCC3D::setObserver(LPUNKNOWN observer, long flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_UNKNOWN VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		observer, flags);
	return result;
}

BOOL CblaxxunCC3D::loadURLfromFile(LPCTSTR url, LPCTSTR mimeType, LPCTSTR fileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		url, mimeType, fileName);
	return result;
}

void CblaxxunCC3D::onUrlNotify(LPCTSTR url, LPCTSTR mimeType, LPCTSTR fileName, long reason)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 url, mimeType, fileName, reason);
}

BOOL CblaxxunCC3D::setObserverWnd(long hwndHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hwndHandle);
	return result;
}

long CblaxxunCC3D::getUiMode()
{
	long result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CblaxxunCC3D::setUiMode(long newMode)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 newMode);
}

void CblaxxunCC3D::openPreferences(long flags)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 flags);
}

void CblaxxunCC3D::playSound(LPCTSTR soundFilename)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 soundFilename);
}

void CblaxxunCC3D::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
