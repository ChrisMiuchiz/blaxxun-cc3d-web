/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jri.h"

/* Header for class vrml/external/exception/InvalidNodeException */

#ifndef _vrml_external_exception_InvalidNodeException_H_
#define _vrml_external_exception_InvalidNodeException_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct java_lang_String;
struct java_lang_Class;

/*******************************************************************************
 * Class vrml/external/exception/InvalidNodeException
 ******************************************************************************/

typedef struct vrml_external_exception_InvalidNodeException vrml_external_exception_InvalidNodeException;

#define classname_vrml_external_exception_InvalidNodeException	"vrml/external/exception/InvalidNodeException"

#define class_vrml_external_exception_InvalidNodeException(env) \
	((struct java_lang_Class*)JRI_FindClass(env, classname_vrml_external_exception_InvalidNodeException))

/*******************************************************************************
 * Public Methods
 ******************************************************************************/

#ifdef DEBUG

/*** public <init> ()V ***/
extern JRI_PUBLIC_API(struct vrml_external_exception_InvalidNodeException*)
vrml_external_exception_InvalidNodeException_new(JRIEnv* env, struct java_lang_Class* clazz);

/*** public <init> (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(struct vrml_external_exception_InvalidNodeException*)
vrml_external_exception_InvalidNodeException_new_1(JRIEnv* env, struct java_lang_Class* clazz, struct java_lang_String *a);

#else /* !DEBUG */

/*** public <init> ()V ***/
#define vrml_external_exception_InvalidNodeException_new(env, clazz)	\
	((struct vrml_external_exception_InvalidNodeException*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_vrml_external_exception_InvalidNodeException_new))

/*** public <init> (Ljava/lang/String;)V ***/
#define vrml_external_exception_InvalidNodeException_new_1(env, clazz, a)	\
	((struct vrml_external_exception_InvalidNodeException*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_vrml_external_exception_InvalidNodeException_new_1, a))

#endif /* !DEBUG*/

/*** public <init> ()V ***/
extern JRIMethodID FAR methodID_vrml_external_exception_InvalidNodeException_new;
#define name_vrml_external_exception_InvalidNodeException_new	"<init>"
#define sig_vrml_external_exception_InvalidNodeException_new 	"()V"
#define use_vrml_external_exception_InvalidNodeException_new(env, clazz)	\
	(methodID_vrml_external_exception_InvalidNodeException_new =	\
		JRI_GetMethodID(env, clazz,	\
			name_vrml_external_exception_InvalidNodeException_new,	\
			sig_vrml_external_exception_InvalidNodeException_new))
#define unuse_vrml_external_exception_InvalidNodeException_new(env, clazz)	\
	(methodID_vrml_external_exception_InvalidNodeException_new = JRIUninitialized)

/*** public <init> (Ljava/lang/String;)V ***/
extern JRIMethodID FAR methodID_vrml_external_exception_InvalidNodeException_new_1;
#define name_vrml_external_exception_InvalidNodeException_new_1	"<init>"
#define sig_vrml_external_exception_InvalidNodeException_new_1 	"(Ljava/lang/String;)V"
#define use_vrml_external_exception_InvalidNodeException_new_1(env, clazz)	\
	(methodID_vrml_external_exception_InvalidNodeException_new_1 =	\
		JRI_GetMethodID(env, clazz,	\
			name_vrml_external_exception_InvalidNodeException_new_1,	\
			sig_vrml_external_exception_InvalidNodeException_new_1))
#define unuse_vrml_external_exception_InvalidNodeException_new_1(env, clazz)	\
	(methodID_vrml_external_exception_InvalidNodeException_new_1 = JRIUninitialized)

/*******************************************************************************
 * IMPLEMENTATION SECTION: 
 * Define the IMPLEMENT_vrml_external_exception_InvalidNodeException symbol 
 * if you intend to implement the native methods of this class. This 
 * symbol makes the private and protected methods available. You should 
 * also call the register_vrml_external_exception_InvalidNodeException routine 
 * to make your native methods available.
 ******************************************************************************/

extern JRI_PUBLIC_API(struct java_lang_Class*)
use_vrml_external_exception_InvalidNodeException(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unuse_vrml_external_exception_InvalidNodeException(JRIEnv* env);

extern JRI_PUBLIC_API(struct java_lang_Class*)
register_vrml_external_exception_InvalidNodeException(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unregister_vrml_external_exception_InvalidNodeException(JRIEnv* env);

#ifdef IMPLEMENT_vrml_external_exception_InvalidNodeException

#endif /* IMPLEMENT_vrml_external_exception_InvalidNodeException */

#ifdef __cplusplus
} /* extern "C" */

/*******************************************************************************
 * C++ Definitions
 ******************************************************************************/

#include "java_lang_RuntimeException.h"

struct vrml_external_exception_InvalidNodeException : virtual public java_lang_RuntimeException {

	static struct java_lang_Class* _use(JRIEnv* env) {
		return use_vrml_external_exception_InvalidNodeException(env);
	}

	static void _unuse(JRIEnv* env) {
		unuse_vrml_external_exception_InvalidNodeException(env);
	}

	static struct java_lang_Class* _register(JRIEnv* env) {
		return register_vrml_external_exception_InvalidNodeException(env);
	}

	static void _unregister(JRIEnv* env) {
		unregister_vrml_external_exception_InvalidNodeException(env);
	}

	static struct java_lang_Class* _class(JRIEnv* env) {
		return class_vrml_external_exception_InvalidNodeException(env);
	}

	/* Public Methods */
	/*** public <init> ()V ***/
	static vrml_external_exception_InvalidNodeException* _new(JRIEnv* env, struct java_lang_Class* clazz) {
		return vrml_external_exception_InvalidNodeException_new(env, clazz);
	}

	/*** public <init> (Ljava/lang/String;)V ***/
	static vrml_external_exception_InvalidNodeException* _new(JRIEnv* env, struct java_lang_Class* clazz, struct java_lang_String *a) {
		return vrml_external_exception_InvalidNodeException_new_1(env, clazz, a);
	}

#ifdef IMPLEMENT_vrml_external_exception_InvalidNodeException

#endif /* IMPLEMENT_vrml_external_exception_InvalidNodeException */
};

#endif /* __cplusplus */

#endif /* Class vrml/external/exception/InvalidNodeException */
