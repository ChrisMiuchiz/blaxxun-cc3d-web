/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jri.h"

/* Header for class java/lang/Exception */

#ifndef _java_lang_Exception_H_
#define _java_lang_Exception_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct java_lang_String;
struct java_lang_Class;

/*******************************************************************************
 * Class java/lang/Exception
 ******************************************************************************/

typedef struct java_lang_Exception java_lang_Exception;

#define classname_java_lang_Exception	"java/lang/Exception"

#define class_java_lang_Exception(env) \
	((struct java_lang_Class*)JRI_FindClass(env, classname_java_lang_Exception))

/*******************************************************************************
 * Public Methods
 ******************************************************************************/

#ifdef DEBUG

/*** public <init> ()V ***/
extern JRI_PUBLIC_API(struct java_lang_Exception*)
java_lang_Exception_new(JRIEnv* env, struct java_lang_Class* clazz);

/*** public <init> (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(struct java_lang_Exception*)
java_lang_Exception_new_1(JRIEnv* env, struct java_lang_Class* clazz, struct java_lang_String *a);

#else /* !DEBUG */

/*** public <init> ()V ***/
#define java_lang_Exception_new(env, clazz)	\
	((struct java_lang_Exception*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_java_lang_Exception_new))

/*** public <init> (Ljava/lang/String;)V ***/
#define java_lang_Exception_new_1(env, clazz, a)	\
	((struct java_lang_Exception*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_java_lang_Exception_new_1, a))

#endif /* !DEBUG*/

/*** public <init> ()V ***/
extern JRIMethodID FAR methodID_java_lang_Exception_new;
#define name_java_lang_Exception_new	"<init>"
#define sig_java_lang_Exception_new 	"()V"
#define use_java_lang_Exception_new(env, clazz)	\
	(methodID_java_lang_Exception_new =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_lang_Exception_new,	\
			sig_java_lang_Exception_new))
#define unuse_java_lang_Exception_new(env, clazz)	\
	(methodID_java_lang_Exception_new = JRIUninitialized)

/*** public <init> (Ljava/lang/String;)V ***/
extern JRIMethodID FAR methodID_java_lang_Exception_new_1;
#define name_java_lang_Exception_new_1	"<init>"
#define sig_java_lang_Exception_new_1 	"(Ljava/lang/String;)V"
#define use_java_lang_Exception_new_1(env, clazz)	\
	(methodID_java_lang_Exception_new_1 =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_lang_Exception_new_1,	\
			sig_java_lang_Exception_new_1))
#define unuse_java_lang_Exception_new_1(env, clazz)	\
	(methodID_java_lang_Exception_new_1 = JRIUninitialized)

/*******************************************************************************
 * IMPLEMENTATION SECTION: 
 * Define the IMPLEMENT_java_lang_Exception symbol 
 * if you intend to implement the native methods of this class. This 
 * symbol makes the private and protected methods available. You should 
 * also call the register_java_lang_Exception routine 
 * to make your native methods available.
 ******************************************************************************/

extern JRI_PUBLIC_API(struct java_lang_Class*)
use_java_lang_Exception(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unuse_java_lang_Exception(JRIEnv* env);

extern JRI_PUBLIC_API(struct java_lang_Class*)
register_java_lang_Exception(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unregister_java_lang_Exception(JRIEnv* env);

#ifdef IMPLEMENT_java_lang_Exception

#endif /* IMPLEMENT_java_lang_Exception */

#ifdef __cplusplus
} /* extern "C" */

/*******************************************************************************
 * C++ Definitions
 ******************************************************************************/

#include "java_lang_Throwable.h"

struct java_lang_Exception : virtual public java_lang_Throwable {

	static struct java_lang_Class* _use(JRIEnv* env) {
		return use_java_lang_Exception(env);
	}

	static void _unuse(JRIEnv* env) {
		unuse_java_lang_Exception(env);
	}

	static struct java_lang_Class* _register(JRIEnv* env) {
		return register_java_lang_Exception(env);
	}

	static void _unregister(JRIEnv* env) {
		unregister_java_lang_Exception(env);
	}

	static struct java_lang_Class* _class(JRIEnv* env) {
		return class_java_lang_Exception(env);
	}

	/* Public Methods */
	/*** public <init> ()V ***/
	static java_lang_Exception* _new(JRIEnv* env, struct java_lang_Class* clazz) {
		return java_lang_Exception_new(env, clazz);
	}

	/*** public <init> (Ljava/lang/String;)V ***/
	static java_lang_Exception* _new(JRIEnv* env, struct java_lang_Class* clazz, struct java_lang_String *a) {
		return java_lang_Exception_new_1(env, clazz, a);
	}

#ifdef IMPLEMENT_java_lang_Exception

#endif /* IMPLEMENT_java_lang_Exception */
};

#endif /* __cplusplus */

#endif /* Class java/lang/Exception */
